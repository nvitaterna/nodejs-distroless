name: Build and test new or changed versions

description: |
  This workflow only builds and tests Docker images for the new or changed versions in the json file.

on:
  pull_request:
    types:
      - opened
      - edited
      - reopened
      - synchronize
    paths:
      - versions.json
      - Dockerfile

jobs:
  configure:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: read
    outputs:
      # set to output of new versions or all versions
      matrix: ${{ steps.set-matrix-new-versions.outputs.matrix || steps.set-matrix-all-versions.outputs.matrix }}
    steps:
      - name: Get changed paths
        uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: |
            dockerfile:
              - 'Dockerfile'
      - name: Checkout current PR ref
        uses: actions/checkout@v4
        with:
          path: "./pr"
      - if: steps.changes.outputs.dockerfile == 'false'
        name: Checkout target ref
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.base.ref }}
          path: "./old"
      - if: steps.changes.outputs.dockerfile == 'false'
        name: Set matrix data to new and changed versions
        id: set-matrix-new-versions
        run: |
          echo "matrix=$(jq -c -n '[inputs] as $files | ($files[0] - $files[1]) | map({ version: .version })' pr/versions.json old/versions.json)" >> $GITHUB_OUTPUT
      - if: steps.changes.outputs.dockerfile == 'true'
        name: Set matrix data to all versions
        id: set-matrix-all-versions
        run: |
          echo "matrix=$(jq -c . | map({ version: .version }) < pr/versions.json)" >> $GITHUB_OUTPUT
      - name: Validate that either new or changed versions exist
        run: |
          if [[ "${{ steps.set-matrix-new-versions.outputs.matrix }}" == "[]" && "${{ steps.set-matrix-all-versions.outputs.matrix }}" == "[]" ]]; then
            echo "No new or changed versions found."
            exit 1
          fi
  build:
    needs: configure
    runs-on: ubuntu-latest
    strategy:
      matrix:
        version: ${{ fromJson(needs.configure.outputs.matrix) }}
        platform:
          - os: linux
            arch: arm64
          - os: linux
            arch: amd64
    steps:
      - name: Get safe ref name
        id: safeRefName
        run: |
          ref=${{github.ref}}
          echo "REF=${ref//\//-}" >> "$GITHUB_OUTPUT"

      - name: Check out the repo
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4

      - name: Login to Docker Hub
        uses: docker/login-action@74a5d142397b4f367a81961eba4e8cd7edddf772 # v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@29109295f81e9208d7d86ff1c6c12d2833863392 # v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@b5ca514318bd6ebac0fb2aedd5d36ec1b5c232a2 # v3

      - name: Build
        id: build
        uses: docker/build-push-action@14487ce63c7a62a4a324b0bfb37086795e31c6c1 # v6
        with:
          load: true
          build-args: |
            UBUNTU_RELEASE=24.10
            NODE_VERSION=${{ matrix.version.version }}
          push: false
          platforms: ${{ matrix.platform.os }}/${{ matrix.platform.arch }}
          cache-to: type=registry,ref=nvitaterna/buildcache:${{vars.REGISTRY_IMAGE}}-${{matrix.version.version}}-${{ matrix.platform.os }}-${{ matrix.platform.arch }}-${{steps.safeRefName.outputs.REF}},mode=max
          tags: |
            nvitaterna/nodejs-distroless:${{ matrix.version.version }}
          cache-from: |
            type=registry,ref=nvitaterna/buildcache:${{vars.REGISTRY_IMAGE}}-${{matrix.version.version}}-${{ matrix.platform.os }}-${{ matrix.platform.arch }}-${{steps.safeRefName.outputs.REF}}
            type=registry,ref=nvitaterna/buildcache:${{vars.REGISTRY_IMAGE}}-${{matrix.version.version}}-${{ matrix.platform.os }}-${{ matrix.platform.arch }}
      - name: Test build Docker image
        id: test
        run: |
          docker run --platform ${{ matrix.platform.os }}/${{ matrix.platform.arch }} --rm nvitaterna/nodejs-distroless:${{ matrix.version.version }} --version | grep -q "v${{ matrix.version.version }}"
